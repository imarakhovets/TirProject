#pragma once

//#ifndef UNITY_BUILD	
#include "StaticArray.h"
//#endif



//
// Шаблон двумерного массива - аналога статического массива Си.
// Обеспечивает:
// 1. Зануление элементов при создании (в отличие от классического массива).
// 2. Контроль диапазонов при индексировании (в отличие от массивов и std::vector).
// 3. Отображение содержимого в отладчике Visual Studio (в отличие от std::vector).
// 4. Выдачу в size() числа со знаком, так что для прохода по массиву
// можно использовать тип int без предупреждений компилятора (в отличие от std::vector).
//
// Использование:
// Вместо
// int a[10][15];
//
// нужно переменную объявлять как
// StaticArray2D<int, 10, 15> a;
//
// вот и все различия.
//
template<typename T, int SIZE, int SIZE2>
class StaticArray2D {
private:

	typedef StaticArray<T, SIZE2> Subtype;
		// Тип подмассивов. Зануление элементов при создании StaticArray2D
		// обеспечивается занулением элементов StaticArray.

	Subtype _data[SIZE];
		// Одномерный массив верхнего уровня.

public:

	//
	// Конструктор по умолчанию - упоминаем,
	// чтобы специальный конструктор не запретил его.
	//
	StaticArray2D() {}

	//
	// Конструктор - задание одинаковых значений элементов массива.
	//
	explicit StaticArray2D(T value) {
		for (int i = 0; i < SIZE; i++) {
			_data[i] = Subtype(value);
		}
	}

	//
	// Оператор индексирования массива с проверкой диапазона.
	//
	Subtype & operator [] (int pos) {
		Assert(0 <= pos && pos < SIZE);
		return _data[pos];
	}

	//
	// Оператор индексирования константного массива.
	//
	const Subtype & operator [] (int pos) const {
		Assert(0 <= pos && pos < SIZE);
		return _data[pos];
	}

	//
	// Функция получения первой размерности.
	// Не слишком актуальна, поскольку размер массива
	// всегда известен в момент использования,
	// поскольку следует из типа массива.
	//
	int size() const {
		return SIZE;
	}

	int size2() const {
		return SIZE2;
	}
};

